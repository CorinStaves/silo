var calculateConstructionDemand = function(vacancyByRegion, dwellingType) {

    if (vacancyByRegion < 0.) {
        throw new Error("Invalid regional vacancy rate for dwelling type \"" + dwellingType + "\" provided: " + vacancyByRegion);
    }

    // alpha = Structural Vacancy, to be expected to be available in a market at equilibrium to allow households to move
    // alpha = 0.03 means that we should expect 3% vacancy in a perfectly balanced housing market
    alpha = dwellingType.getStructuralVacancyRate();
    print(alpha);
    // beta = Development that happens when vacancy rate is at structural vacancy alpha
    // beta = 0.01 means that when the vacancy rate is at the level alpha, 1% additional dwellings are added (if land use permits)
    beta = 0.01;

    // gamma = Expected development when vacancy drops down to 0% (i.e., max. possible development)
    gamma = alpha + beta;

    // slope = parameter for decay function for vacancy rates above the structural vacancy
    // values of this function were derived heuristically to make curve look nice
    slope = -18.33 * Math.log(alpha) - 16.79

    if (dwellingType=="SFD"){
        //alpha = 0.03;
        beta = 0.01;
    } else if (dwellingType=="SFA"){
        //alpha = 0.03;
        beta = 0.01;
    } else if (dwellingType=="MF234"){
        //alpha = 0.04;
        beta = 0.01;
    } else if (dwellingType=="MF5plus"){
       // alpha = 0.05;
        beta = 0.01;
    } else if (dwellingType=="MH"){
       // alpha = 0.03;
        beta = 0.01;
    } else {
        throw new Error("Invalid dwelling type \"" + dwellingType + "\" in javaScript calculateConstructionDemand provided.");
    }
    if (vacancyByRegion > 1){
        vacancyByRegion = 1;
        //this checks that very large vacancy rates (generally in tests with subsamples of sp) do not result in  infinity
    }

    if (vacancyByRegion <= alpha) {
        return gamma + vacancyByRegion * ((beta - gamma) / alpha);
    } else {
        return gamma / Math.exp(slope * vacancyByRegion);
    }
}
