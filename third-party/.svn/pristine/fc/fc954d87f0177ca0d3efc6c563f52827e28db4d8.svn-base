<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
</head>
<body bgcolor="white">
Provides classes relating to tensors. A tensor is a rectangular, (possibly) multi-dimensional array of homogenous data.
The intention of the classes in this package is to provide a high livel of performance and flexibility without overly
burdening the user - especially with regards to casting and instance specification. Specifically, the general <code>Tensor&lt;T&gt;</T></code>
interface specifies a simple rectengular array of data with extensible indexing. The descendants of this class allow for
greater specificity in class typing, as well as (often) better performance. For example, the <code>D2DoubleTensor</code>
class provides read and write functionality which explicitly use 2 dimensional indices and deal with primitives and, in
general, will outperform (in terms of computation time and memory use) the more generic functionality inherited from the
<code>Tensor&lt;Double&gt;</T></code> interface.
<p>
The naming scheme of the interfaces inheriting from the <code>Tensor&lt;T&gt;</T></code> interface is strictly defined
so that both reading and writing code using these descendant interfaces is not too burdensome. The most general form of
a given interface name is:
<pre>
    <code>[Id][Type][DN]Tensor</code>
</pre>
where the entries in brackets are optional, depending on the interface in question, and can take the following values:
<ul>
    <li>
        <code>Id</code> - if the tensor contains explicitly specified index ids, then <code>Id</code>
    </li>
    <li>
        <code>Type</code> - if the tensor holds primitive data, then the type it holds, the available types are:
        <ul>
            <li>Boolean</li>
            <li>Char</li>
            <li>Short</li>
            <li>Byte</li>
            <li>Int</li>
            <li>Long</li>
            <li>Float</li>
            <li>Double</li>
        </ul>
    </li>
    <li>
        <code>DN</code> - if the dimensionality of the tensor is explicitly defined, <code>N</code> specifies the number
                      of dimensions in the tensor; <i>e.g.</i> <code>D0</code> or <code>D5</code>
    </li>
</ul>
The various interface combinations are quite numerous, so to help organize the API, these specifications are held in the
<code>com.pb.sawdust.tensor.decorators</code> package.
<p>
As a further convenience, the alias interfaces are specified for the most commonly used tensors: 0-dimensons (<code>Scalar</code>),
1-dimension (<code>Vector</code>), and 2-dimensions (<code>Matrix</code>). These specifications are held in the
<code>com.pb.sawdust.tensor.alias</code> package.
<p>
All tensors provide flexible indexing which allows the ability to reference the tensor elements by both 0-based integer
counters (as with Java arrays) or user-specified ids, which can be any object type. Additionally, the indexing functionality
allows the ability to create reference tensors which are modified views of tensor data which don't require the copying or
further manipulation of the underlying, source tensor.
<p>
Tensors should generally be constructed via factory classes defined by the <code>TensorFactory</code> interface. These factories
allow an abstraction away from explicity tensor construction (making it easier to swap implementations as needed), but
also provide a fairly large amount of type-wrapping which allows for correct type-casting when needed by the user. As an
example, if a 2-dimensional tensor is constructed using the following call:
<pre>
    <code>Tensor&lt;Double&gt; t = ArrayTensor.getFactory().doubleTensor(2,3);</code>
</pre>
then <code>t</code> will not only be a <code>Tensor&lt;Double&gt;</code>, but could also be cast to (among others) a two-dimensional
tensor (<code>D2Tensor&lt;Double&gt;</code>), a tensor holding  <code>double</code>s (<code>DoubleTensor</code>), or a
matrix holding <code>double</code>s (<code>DoubleMatrix</code>).
</body>
</html>