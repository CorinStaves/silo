apply plugin: 'java'

slimjimVersion = '1.2'
jreVersion = '1.6'
jrePlatform = 'windows_64bit'
jreName = 'jre6.0_27'

task preClean << { 
    delete 'target'
    delete 'release'
    delete 'test_out'
    delete 'build'
}

task postClean << { 
    delete 'target'
}

sourceSets {
     main.classesDir = new File('target/classes')
}

sourceSets {
     test.classesDir = new File('target/test-classes')
}

Attributes getNewAttributes(Map<String,?> atts) {
    a = new org.gradle.api.java.archives.internal.DefaultAttributes()
    for (String k : atts.keySet()) {
        a.put(k,atts.get(k))
    }
    a
}

jar {
    destinationDir = new File('target')
    baseName = 'SlimJim'
    version = slimjimVersion
    manifest {
        attributes('Build-Date': new Date().toString(), 
                   'Build-Java-Version': System.getProperty('java.version'),
                   'Main-Class': 'crf.slimjim.SlimJim')
        a = getNewAttributes('Specification-Title': 'SlimJim Program',
                             'Specification-Version': slimjimVersion,
                             'Specification-Vendor': 'crf',
                             'Implementation-Title': 'crf.slimjim',
                             'Implementation-Version': slimjimVersion,
                             'Implementation-Vendor': 'crf',
                             'Sealed': 'true')
        sections = getSections()
        sections.put('crf/slimjim/',a)
    }
    metaInf = ['README.txt','LICENSE.txt','NOTICE.txt']
}

javadoc {
    destinationDir = new File('target/javadoc')
    classpath = compileJava.classpath
}

test {
    testReport = true
    testReportDir = new File('test_out')
    testResultsDir = new File('test_out')
}

task expandJre(type: Copy) {
    from zipTree('../../java/' + jreVersion + '/' + jrePlatform + '/' + jreName + '.zip')
    into 'target'
}

task expandToolsToJre(type: Copy) {
    from zipTree('../../java/' + jreVersion + '/' + jrePlatform + '/lib/tools.zip')
    into 'target/' + jreName + '/lib'
}

task aZipJre(type: Zip) {
    baseName = jreName
    destinationDir = new File('release')
    from ('target') {
        include jreName + '/**/*'
    }
}

task zzCreateRelease(type: Zip) {
    baseName = 'SlimJim'
    version = slimjimVersion
    destinationDir = new File('release')
    from ('target') {
        include '*.jar'
        include 'javadoc/**/*'
    }
    from ('release') {
        include jreName + '.zip'
    }
}

task zzCreateReleaseWithSource(type: Zip) {
    baseName = 'SlimJim'
    version = slimjimVersion
    classifier = 'src'
    destinationDir = new File('release')
    from ('target') {
        include '*.jar'
        include 'javadoc/**/*'
    }
    from ('release') {
        include jreName + '.zip'
    }
    from (sourceSets*.allSource) {
        into 'src'
    }
}

task createSimpleRelease(type: Copy) {
    destinationDir = new File('release/base')
    from ('target') {
        include ('*.jar')
    }
    from ('LICENSE.txt')
}

task cleanReleaseJre (type: Delete) {
    delete 'release/' + jreName + '.zip'
}

dependencies {
    compile files('target/' + jreName + '/lib/tools.jar')
    testCompile files('target/' + jreName + '/lib/tools.jar')
}

task a_release(dependsOn: [preClean]) << {}
task b_release(dependsOn: [expandJre,expandToolsToJre]) << {}
task c_release(dependsOn: javadoc) << {}
task d_release(dependsOn: build) << {}
task e_release(dependsOn: createSimpleRelease) << {}
task f_release(dependsOn: [cleanReleaseJre,postClean,clean]) << {}

task release(dependsOn: [a_release,
                         b_release,
                         c_release,
                         d_release,
                         e_release,
                         f_release
                         ]) << {}
